// Mocks generated by Mockito 5.4.4 from annotations
// in movies_list/test/presentation/views/movies/movies_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_list/data/datasource/movies_datasource.dart' as _i3;
import 'package:movies_list/data/models/models.dart' as _i6;
import 'package:movies_list/domain/entities/movie_entity.dart' as _i7;
import 'package:movies_list/domain/failures/custom_error.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IMoviesDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMoviesDatasource extends _i1.Mock implements _i3.IMoviesDatasource {
  MockIMoviesDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CustomError, List<_i6.YearModel>>>
      getYearsWithMoreThanOneWinner() => (super.noSuchMethod(
            Invocation.method(
              #getYearsWithMoreThanOneWinner,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.CustomError, List<_i6.YearModel>>>.value(
                _FakeEither_0<_i5.CustomError, List<_i6.YearModel>>(
              this,
              Invocation.method(
                #getYearsWithMoreThanOneWinner,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.CustomError, List<_i6.YearModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.CustomError, List<_i6.StudioModel>>>
      getStudiosWithTheMostWins() => (super.noSuchMethod(
            Invocation.method(
              #getStudiosWithTheMostWins,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.CustomError, List<_i6.StudioModel>>>.value(
                _FakeEither_0<_i5.CustomError, List<_i6.StudioModel>>(
              this,
              Invocation.method(
                #getStudiosWithTheMostWins,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.CustomError, List<_i6.StudioModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.CustomError, List<_i6.MovieModel>>> getMoviesByYear(
          String? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesByYear,
          [year],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CustomError, List<_i6.MovieModel>>>.value(
                _FakeEither_0<_i5.CustomError, List<_i6.MovieModel>>(
          this,
          Invocation.method(
            #getMoviesByYear,
            [year],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CustomError, List<_i6.MovieModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.CustomError, _i6.ProducerIntervalDataModel>>
      getMoviesAwardsRange() => (super.noSuchMethod(
            Invocation.method(
              #getMoviesAwardsRange,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.CustomError,
                        _i6.ProducerIntervalDataModel>>.value(
                _FakeEither_0<_i5.CustomError, _i6.ProducerIntervalDataModel>(
              this,
              Invocation.method(
                #getMoviesAwardsRange,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.CustomError, _i6.ProducerIntervalDataModel>>);

  @override
  _i4.Future<_i2.Either<_i5.CustomError, _i6.PaginedMoviesModel>>
      getMoviesByYearPagined(
    String? year, {
    required int? page,
    required int? size,
    required bool? winner,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getMoviesByYearPagined,
              [year],
              {
                #page: page,
                #size: size,
                #winner: winner,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.CustomError, _i6.PaginedMoviesModel>>.value(
                _FakeEither_0<_i5.CustomError, _i6.PaginedMoviesModel>(
              this,
              Invocation.method(
                #getMoviesByYearPagined,
                [year],
                {
                  #page: page,
                  #size: size,
                  #winner: winner,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.CustomError, _i6.PaginedMoviesModel>>);
}

/// A class which mocks [PaginedMoviesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaginedMoviesModel extends _i1.Mock
    implements _i6.PaginedMoviesModel {
  MockPaginedMoviesModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.MovieEntity> get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: <_i7.MovieEntity>[],
      ) as List<_i7.MovieEntity>);

  @override
  int get pageNumber => (super.noSuchMethod(
        Invocation.getter(#pageNumber),
        returnValue: 0,
      ) as int);

  @override
  int get totalPages => (super.noSuchMethod(
        Invocation.getter(#totalPages),
        returnValue: 0,
      ) as int);

  @override
  bool get hasMore => (super.noSuchMethod(
        Invocation.getter(#hasMore),
        returnValue: false,
      ) as bool);

  @override
  int get totalElements => (super.noSuchMethod(
        Invocation.getter(#totalElements),
        returnValue: 0,
      ) as int);
}
